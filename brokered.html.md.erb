---
title: Brokered Service
owner: Services
---

You can integrate your software service with <%= vars.platform_name %> to create a brokered service and
service tile for <%= vars.platform_name %>.

You can achieve the first real improvement in your <%= vars.platform_name %> customers user experience by creating a [Service Broker](service-brokers.html) for your service.

A brokered service runs external to <%= vars.platform_name %>, but it has a tile
on [VMware Tanzu Network](http://network.pivotal.io). You install, configure, and upgrade the tile through the
Tanzu Operations Manager Installation Dashboard.

The service broker eliminates the need for you to know the URLs and
credentials for your services. They are managed automatically by the broker.

Building a broker for a (still) externally deployed service is generally
a good way to publish a first tile that adds real value for you, your software, and <%= vars.platform_name %>.

## <a id="create"></a> Create a Brokered Service

* A brokered service requires a service broker, which publishes an API to the Cloud Controller.

For more information about how to create a service broker, see [Service Brokers](./service-brokers.html).

* [Route Services](./service-brokers.html#route) explains how to create a route service, for use in the routing layer of <%= vars.platform_name %> rather than by hosted <%= vars.platform_name %>
apps.

* [Catalog](./service-brokers.html#catalog) explains how to design the part of your Service Broker API that publishes
service plan information to the Marketplace.

* You can write your service broker in the language of your choice.
[Buildpacks](./buildpacks.html) explains how to create a language-specific buildpack that compiles and packages your service broker to run on <%= vars.platform_name %>.

* After you have the individual components for your brokered service integration, you can work through [Building Your First Tile](./index.html#tile-steps) to create
your tile.

At any level of integration, <%= vars.company_name %> recommends and supports using [Concourse](./concourse.html) for continuous integration during development.

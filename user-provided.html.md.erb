---
title: User-Provided Service
owner: Services
---

You can create a user-provided tile service. Here are some use cases:

* Your software is available as a SaaS.
* You already have a way to install your software on-premises at a customer site.
* Your customer already uses your software, is now adopting <%= vars.app_runtime_abbr %>, and wants to consume your software from apps that they deploy on <%= vars.app_runtime_abbr %>.


## <a id="creating"></a>Creating a user-provided service

A <%= vars.app_runtime_full %> developer can call your service from their app code, even if the
service runs outside of <%= vars.app_runtime_abbr %> and has no service broker.

This do-it-yourself solution represents the lowest level of <%= vars.app_runtime_abbr %> service integration. It works only for services running external to <%= vars.app_runtime_abbr %>, and does not publish the services to the Services Marketplace or make them available to anyone outside the space of the developer who runs these commands. For more information, see [User-Provided Service Instances](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/6.0/tas-for-vms/services-user-provided.html).

Running apps with a user-provided service is a great way to determine what information needs to be
passed in the credential structure, verify that the integration works, and develop a test app
that can continue to be used at higher levels. From the app developer perspective, after
a user-provided service works, later integrations of the service do not require any further code changes.
User-provided service bindings are fully forward-compatible with brokered service bindings.


## <a id="using"></a>Using a user-provided service

App developers can bind their apps to your service and write all code necessary to
access it through a <%= vars.app_runtime_abbr %> service binding.

To use an external service that has no tile:

1. Create a service instance by running:

    ```
    cf create-user-provided-service YOUR-SERVICE-NAME -p CREDENTIALS
    ```

    Where:

    * `YOUR-SERVICE-NAME` is the name of the service instance you want to create.
    * `CREDENTIALS` is a valid JSON string that contains the URL and credentials necessary to connect to your externally-deployed service.

1. Bind the service instance to their app by running:

    ```
    cf bind-service
    ```

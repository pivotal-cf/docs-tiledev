---
title: How Pivotal Platform and Pivotal Platform Services Work
owner: Services
---

<% current_page.data.title = "How " + vars.product_name + " and " + vars.product_name + " Services Work" %>


There are many ways to integrate services with <%= vars.product_name %>. The right one for each service depends on what the service does, and how
customer applications consume it. To determine the best way to integrate your
service, you will need a good understanding of <%= vars.product_name %> concepts like applications, containers, services, brokers, and buildpacks.

This page provides a collection of links to documentation for the most relevant
concepts. If you prefer to learn through guided training,
[ask us](mailto:mjoseph@pivotal.io) about available training options.

## <a id="overview"></a>General Overview

For general overview of <%= vars.product_name %>, and the various ways to interact with it,
use the following links:

- [Cloud Foundry Subsystems](https://docs.pivotal.io/application-service/concepts/overview.html) provides high-level descriptions of internal functions performed by different <%= vars.product_name %> components.
- [Cloud Foundry Command Line Interface (cf CLI)](https://docs.pivotal.io/application-service/cf-cli/index.html) links to topics that explain how to direct <%= vars.product_name %> deployment from your local command line.
- [Pivotal Ops Manager](https://docs.pivotal.io/ops-manager/pcf-interface.html) describes the Ops Manager and Installation Dashboard interfaces, where cloud operators see, install, configure, and deploy service tiles.
- [Pivotal Apps Manager](https://docs.pivotal.io/application-service/console/index.html) describes the Apps Manager interface, where app developers create and configure service instances and bind them to their apps.

## <a id="applications"></a> Applications

Cloud Foundry is primarily a cloud native application platform. To understand how to integrate your services with Cloud Foundry, you should understand how your customers are using the platform to develop, deploy, and operate their applications.

- [Developer Guide](https://docs.pivotal.io/application-service/devguide/index.html) explains how to push an app to run on <%= vars.product_name %> and enable it to use services.
- [Logging and Monitoring](https://docs.pivotal.io/application-service/loggregator/data-sources.html) describes how <%= vars.product_name %> aggregates and streams logs and metrics from the apps it hosts and from internal system components.

## <a id="services"></a> Services

Most value-add integrations are done by exposing your software to customer applications as services. To understand the service concepts, and what a service integration looks like, read the following documentation:

- [Services](https://docs.pivotal.io/application-service/services/overview.html) explains how developers provision and use existing services in their apps.
- [Cloud Foundry Service Brokers and <%= vars.product_name %> Tiles](https://docs.pivotal.io/svc-sdk/odb/about.html#cf-broker) briefly describes the two main elements of <%= vars.product_name %> service integration: the service broker API, which connects the service to <%= vars.product_name %> internally by taking commands from the Cloud Controller; and the tile, a packaged interface that cloud operators use to install and configure a service within <%= vars.product_name %>.
- [Custom Services](https://docs.pivotal.io/application-service/services/index.html) explains how service authors package their service as a [Managed Service](./managed.html) that is available for use by <%= vars.product_name %> operators and developers, and which runs locally on <%= vars.product_name %> rather than running remotely.

## <a id="buildpacks"></a> Buildpacks

When application code is deployed to Cloud Foundry, it is processed by a language-specific buildpack. Language buildpacks provide a convenient integration hook for any service that needs to inspect or embellish application code.
Supplying buildpacks also provides a language-agnostic way to inject your code into the application container image.

- [Application Staging Process](https://docs.pivotal.io/application-service/concepts/how-applications-are-staged.html) explains how <%= vars.product_name %> packages and deploys apps in containers with buildpacks so that they can run on multiple VMs interchangeably.
- [Language Buildpacks](https://docs.pivotal.io/application-service/buildpacks/index.html) describes the language-specific buildpacks support <%= vars.product_name %> apps.
- [Custom Buildpacks](https://docs.pivotal.io/application-service/buildpacks/custom.html) describes how to use supply buildpacks to add dependencies or code without having to change (multiple) language-sepcific buildpacks.

## <a id="agents"></a> Embedded Agents

Some integrations depend on the ability to inject code into the application container.
We refer to these injected components as "container-embedded agents".
[Buildpacks](./buildpacks.html#other) provide a mechanism to inject components into the application container image, and the `.profile.d` directory provides a way to start agents before or alongside the customer application.

- [Agent Injection with a supply buildpack](https://docs.pivotal.io/application-service/buildpacks/custom.html)
- [Using .profile.d](https://docs.pivotal.io/application-service/devguide/deploy-apps/deploy-app.html#profile)


## <a id="nozzles"></a> Nozzles

Cloud Foundry's logging system, Loggregator, has a feature named **firehose**. The firehose includes the combined stream of logs from all apps, plus metrics data from Cloud Foundry components, and is intended to be used by operators and administrators.

A nozzle takes this data and forwards it to an external logging and/or metrics solution.

- [Loggregator system](https://github.com/cloudfoundry/loggregator)

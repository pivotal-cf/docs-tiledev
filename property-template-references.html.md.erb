---
title: Property and template references
owner: Ops Manager
---

Use these instructions to describe your product template for your tile and learn how to edit it to include different properties.

The `metadata` subdirectory of a tile contains a product template file in `.yml` file format. The product template file specifies how the tile interface collects configurable properties from the user,
and how Tanzu Operations Manager incorporates these properties into the deployment manifest.

## <a id="product-template"></a> Product template contents

The product template, a `.yml` file in the tile's `metadata` subdirectory, includes or points to:

* **Metadata:** High-level information about your tile.

* **Dependencies:** Specifies tile dependencies.

* **Property blueprints:** Templates to represent values.

* **Form types:** Exposes property blueprints to generated forms.

* **Job types:** Configuration properties for jobs defined in the BOSH release.

* **Runtime configs:** Specifies the manifest for any number of global deployment configurations.

Use the product template use the
[<%= vars.platform_name %> example tile](https://github.com/pivotal-cf-experimental/ops-manager-example),
a functional tile that is provided by the Tanzu Operations Manager engineering team that deploys the NGINX web server.

For more information about product template configuration, see [Top-Level Properties](#top-level).

To learn how to configure your tile's forms, see [Form properties](#form-properties).


## <a id='property-values'></a> Modifying the product template

You can modify the product template to designate property values.

Within the product template, there are two sections with `manifest` snippets:

* `form_types`: Defines the tile interface, or how users of your tile view and interact with different tile features.

* `job_types`: Defines the jobs that the manifest deploys, or what the tile does in response to user input, developer input, or at set intervals.

You can use special expressions in these snippets to include property values that the tile might
otherwise not use, for example, user-provided configurable properties or dynamically generated
system properties.

These special expressions take the following forms:

* Double parentheses expressions
* Triple parentheses expressions

### <a id="double-parens"></a> Double parentheses expressions

Double parentheses expressions, such as `(( PROPERTY-VALUE ))`, designate property values that Tanzu Operations Manager uses when it generates the deployment manifest. This occurs after you click **Apply Changes**.

These values include configurable properties and properties supplied by Tanzu Operations Manager.

To include these properties in a manifest snippet, use "double-parens" syntax, which consists of a variable name surrounded by two sets of parentheses, as shown in the following example:

```console
manifest: |
  pizza_toppings:
    peppers: (( .properties.example_selector.pizza_option.peppers.value ))
```

### <a id="triple-parens"></a> Triple parentheses expressions

Triple-parentheses expressions, such as `((( PROPERTY-VALUE )))`, designate property values that BOSH supplies when it deploys instances of the tile service. For example, CredHub credentials that are designated in triple parentheses.

To include these BOSH deploy-time properties in a manifest snippet, use "triple-parens" notation, as shown in the following example:

```console
manifest: |
  credhub:
    concatenated_password: prefix-((( credhub-password )))-suffix
    password: ((( credhub-password )))
```

When Tanzu Operations Manager parses a product template and BOSH parses a manifest, they both use properties designated by double-parens syntax.

Some property values in a product template, such as CredHub credentials, must be filled in by BOSH on the BOSH Director VM, rather than by Tanzu Operations Manager.

Tanzu Operations Manager gets rid of the outer parentheses from these expressions and includes the resulting double-parens expressions in the manifest it generates, for BOSH to evaluate at deploy time.

For more information about tile properties, see [Referencing properties](#property-refs).

### <a id='property-refs'></a> Referencing properties

Each property is represented by two segments:

* The location of the property.
* The information from the property you want to access, commonly known as accessors.

When you use these two segments, you can write an expression as:

```
(( PROPERTY-LOCATION.ACCESSOR ))
```

Where:

* `PROPERTY-LOCATION` is the location of the property.
* `ACCESSOR` is the accessor.

#### <a id="property-location"></a> Referencing a location

The method of referencing the location of the property varies.
The following table describes the different methods of referencing a property:

| Method Name | Description |
| ----------- | ----------- |
| .properties.top_level_property | The property blueprint called "top_level_property" found in the global list of properties of the same tile. |
| .job_one.job_level_property | The property blueprint called "job_level_property" found in the list of properties of the job "job_one" of the same tile. |
| job_level_property | The property blueprint called "top_level_property" found in the same tile and job whose manifest is currently being evaluated. |
| ..other_product.properties.top_level_property | The property blueprint called "top_level_property" found in the global list of properties of the tile "other_product". |
| ..other_product.job_two.job_level_property | The property blueprint called "job_level_property" found in the list of properties of the job "job_one" of the tile "other_product". |

#### <a id="accessor-location"></a> Referencing an accessor

Accessors vary between property blueprint types.
The following example uses the property blueprint type `string` with its one accessor, `value`:

```console
(( .properties.example-string.value ))
```

Tanzu Operations Manager allows empty arrays in double-parentheses expressions.

For example:

```console
(( .properties.example-string.value || [] ))
```

For more information about the available properties and their accessors, see [Property Blueprint reference](#property-blueprints).

### <a id='product'></a> Product context

Product context is useful for accessing information about a tile.
It can be used in a manifest using this syntax:

```console
(( ..TILE-NAME.accessor ))
```

Where `TILE-NAME` is the name of the tile.

These are the allowed accessors:

| Accessor | Description |
| -------- | ----------- |
| deployment_name | Provides the deployment name passed to BOSH for the tile. |
| network_name | Provides the name of the network assigned for the tile. |
| present? | Returns `true` when the tile is staged or deployed |

### <a id='dollar'></a> Dollar contexts

Outside of properties, you can also retrieve information about various configuration details of your tile and Tanzu Operations Manager.

* **$ops_manager:** Any tile uses this to obtain information about specific Tanzu Operations Manager deployments.

* **$director:** Any tile uses this to obtain information about the BOSH Director.

* **$runtime:** Any tile uses this to obtain information about the <%= vars.app_runtime_full %> tile.

* **$self:** Your own tile uses this to obtain information about its configuration.

#### <a id='ops-manager'></a> $ops_manager

The following table describes the accessors you can use to retrieve information about an Tanzu Operations Manager deployment:

| Accessor | Description |
| -------- | ----------- |
| `ca_certificate` | Provides the root CA cert that is used to sign the Director VM. |
| `trusted_certificates` | Provides a list of certificates that the Director applies to all VMs. |
| `http_proxy` | Provides the comma-separated values (CSV) that are entered when Tanzu Operations Manager traffic is directed to an HTTP Proxy. |
| `https_proxy` | Provides the CSVs that are entered when Tanzu Operations Manager traffic is directed to an HTTPS Proxy. |
| `no_proxy` | Provides the CSVs that should not go through a proxy. |
| `instance_types_catalog` | Provides a list of all available VM types. Includes custom VM types. |
| `restricted_view_api_access_credentials` | Provides a payload for a UAA client to make read-only non-credential requests against Tanzu Operations Manager. The payload includes `uaa_client_name`, `uaa_client_secret`, `hostname`, and `port`. |
| `iaas_type` | Provides the type of the infrastructure: `google`, `aws`, `azure`, `vsphere`, or `openstack`. |

#### <a id='director'></a> $director

The following table describes the accessors you can use to retrieve information about your BOSH Director:

| Accessor | Description |
| -------- | ----------- |
| `guid` | Unique identifier for the BOSH Director. |
| `deployment_ip` | Provides the IP address where the BOSH Director is deployed. |
| `username` | Provides the username for the BOSH Director VM. |
| `password` | Provides the password for the BOSH Director VM. |
| `ntp_servers` | Provides a list of Network Time Protocol (NTP) servers that the BOSH Director deploys. |
| `ca_public_key` | Provides the public key that is used to sign the BOSH Director VM. |
| `hostname` | Provides the hostname for the BOSH Director VM. |
| `tld` | Returns the string `bosh` as the top-level domain (TLD) of the BOSH Director. |
| `metrics_server_enabled` | Returns `true` if the `system-metrics-server` job is included in the manifest.<br>For information about the job, see <a href="https://bosh.io/jobs/system-metrics-server?source=github.com/cloudfoundry/bosh-system-metrics-server-release">system-metrics-server job</a> in the BOSH documentation. |
| `bosh_metrics_forwarder_client_name` | Provides the BOSH Metrics Forwarder client name. |
| `bosh_metrics_forwarder_client_secret` | Provides the BOSH Metrics Forwarder client secret. |
| `system_metrics_runtime_enabled` | Exposes whether the `ops_manager_system_metrics_runtime` is added to the BOSH Director. |
| `dns_release_present` | Deprecated. Always returns `true`. |

#### <a id='runtime'></a> $runtime

The following table describes the accessors you can use to retrieve information about your <%= vars.app_runtime_abbr %> tile:

| Accessor | Description |
| -------- | ----------- |
| `system_domain` | Provides domain for system-level <%= vars.app_runtime_abbr %> components, such as the API, UAA, or Apps Manager. |
| `apps_domain` | Provides the default domain used by apps. |
| `system_api_url` | Provides the URL to the <%= vars.app_runtime_abbr %> API component. |
| `login_url` | Provides the URL to authenticate with the <%= vars.app_runtime_abbr %> components. |
| `uaa_url` | Provides the URL to the <%= vars.app_runtime_abbr %> UAA component. |
| `console_url` | Provides the URL to the <%= vars.app_runtime_abbr %> Apps Manager component. |
| `default_reply_to` | Provides the default reply-to email address for the system domain. |
| `default_from` | Provides the default from email address of the system domain. |

#### <a id='self'></a> $self

The following table describes the accessors you can use to retrieve information about your own tile:

| Accessor | Description |
| -------- | ----------- |
| `uaa_client_name` | Provides the UAA client name created for your tile to communicate with the BOSH Director. |
| `uaa_client_secret` | Provides the UAA client secret created for your tile to communicate with the BOSH Director. |
| `service_network` | Provides the name of the service network assigned to your tile. |
| `stemcell_version` | Provides the version of the stemcell your tile uses. |

## <a id='complex'></a> Complex properties: selectors and collections

Most properties are simple values, for example,  strings, integers, URL addresses, or IP addresses. Others are complex, like selectors or collections.

* **Selectors**: Give you a choice of a set of inputs.
* **Collections**: Give you the ability to enter an array of values to create a hash.

Selectors appear as follows:

![Collection showing record collection.](img/collection.png)

The selector and collections inputs are referenced by their selector and collection property blueprints.

Most properties are simple values such as strings, integers, URL addresses, or IP addresses. Selectors and collections are more complicated than simple properties, because they contain manifest snippets, which are further referenced in other manifest snippets. Selector and collection properties can only exist as top-level properties. You cannot nest selector properties inside of collection properties, nest collection properties inside of selector properties, or nest these properties inside themselves (for example, nesting a selector inside of a selector).

## <a id='top-level'></a> Top-Level Properties

### <a id="non-configurable-certs"></a> Non-configurable certificates are invalid within a selector

The  `rsa_cert_credentials` property with `configurable: false` is invalid within a `selector` property.

The tile does not raise any validation errors, but the following error appears during the pre-deploy check:

```
{
  "pre_deploy_check": {
    ...
    "properties": [
      {
        "name": ".properties.EXAMPLE-CERT-PROPERTY",
        "type": "rsa_cert_credentials",
        "errors": [
          "can't be blank",
          "can't be blank"
        ]
      }
    ],
    ...
  }
}
```

Where `EXAMPLE-CERT-PROPERTY` is the property you specify.
## <a id='top-level'></a> Top-level properties

The following example shows the properties that appear at the top of a product template. The definitions of each property follow this example:

```console
---
name: example-tile
product_version: "1.0-build.0"
minimum_version_for_upgrade: "1.7.0"
pivnet_filename_regex: "tile-*.pivotal"
metadata_version: "1.11"
opsmanager_syslog: true
label: 'Ops Manager: Example Tile'
description: An example tile to demonstrate Ops Manager tile author features
rank: 1
service_broker: false # Default value
stemcell_criteria:
  os: ubuntu-xenial
  version: "97.0"

  enable_patch_security_updates: true

requires_product_versions:
  - name: p-mysql
    version: '~> 2.4'

releases:
  - name: example-release
    file: "example-release.tgz"
    version: "15"

variables:
  - name: credhub-password
    type: password

post_deploy_errands:
  - name: example-errand

pre_delete_errands:
  - name: example-errand

runtime_configs:
  - name: example-runtime-config
  runtime_config: |
    releases:
    - name: os-conf
      version: 15
    addons:
    - name: login
      jobs:
      - name: login-banner
        release: os-conf
      properties:
        login_banner:
          text: |
            (( .properties.example_string.value )).
```

### <a id='top-name'></a> name

* **Format:** String
* **Type:** Required

The internal name of the tile. You must keep the name of your tile consistent for migrations to function properly. Changing the name indicates the installation of a completely different tile.

### <a id='top-version'></a> product_version

* **Format:** String
* **Type:** Required

The version of the tile.

You can only import this version into Tanzu Operations Manager once. If you want to import the same tile or version, you must delete the existing one from the `/metadata` folder and delete the installation files from Tanzu Operations Manager's disk.

The version number is important for migrations.

For more information, see [Upgrading Tiles](./tile-upgrades.html).

### <a id='top-min-version'></a> minimum\_version\_for\_upgrade

* **Format:** String
* **Type:** Required

You must set a minimum version for upgrading to your current tile version. The following example shows a current tile version of v1.7 that only upgrades from a v1.6.x version of the same tile:

```
- product_version:  1.7.0.0
  minimum_version_for_upgrade:  1.6.0.0
```

### <a id='top-metadata'></a> metadata_version

* **Format:** String
* **Type:** Required

The version of the schema of the product template, the file that this documentation describes.

If you bump the version number, it activates new properties that are not present in an older `metadata_version`. It can also require you to  restructure the product template to conform to the new `metadata_version`.

The `metadata_version` corresponds to a major or minor release of Tanzu Operations Manager. Tanzu Operations Manager can accept a tile with a `metadata_version` that is older than the Tanzu Operations Manager version, but Tanzu Operations Manager cannot accept a
tile with a `metadata_version` that is newer than the Tanzu Operations Manager version. A best practice is to set the `metadata_version` to be the same as the oldest version of
Tanzu Operations Manager that the tile version supports.

### <a id='top-label'></a> label

* **Format:** String
* **Type:** Optional

The label that is used in the tile when it appears in the Tanzu Operations Manager Dashboard.

### <a id='top-description'></a> description

* **Format:** String
* **Type:** Optional

A description of the tile.

### <a id='top-rank'></a> rank

* **Format:** Integer
* **Type:** Optional

The order in which a tile appears on the dashboard. The BOSH Director always appears at rank 100.

For your tile to appear to the right of BOSH Director, you must set this value to an integer less than 100. Set it to 1.

If all tiles have the same rank, Tanzu Operations Manager sorts them alphabetically.

### <a id='top-pivnet_filename_regex'></a> pivnet_filename_regex

* **Format:** String
* **Type:** Optional

This regular expression allows the Tanzu Operations Manager  VMware Tanzu Network integration to pull a specific tile file. You must do this when there are multiple tiles with the same product slug.

### <a id='top-service-broker'></a> service_broker

* **Format:** Boolean
* **Type:** Optional, default `false`

Set `service_broker` to `true` for on-demand service brokers. When you set `service_broker` to `true` it:

* Enables the service network selector property type.

* Requires you to select a service network during tile configuration. You can reference the selected service network with `(( $self.service_network ))`.

* Include a UAA client for the service to use. Tile authors can reference the UAA client credentials with `(( $self.uaa_client_name ))` and `(( $self.uaa_client_secret ))`.

### <a id='top-stemcell-criteria'></a> stemcell_criteria

* **Format:** Hash
* **Type:** Required

With the `enable_patch_security_updates` property, you can automatically use the latest patched version of a stemcell. This key is set to `true` by default. For tiles using static compilations, you can deactivate this feature. This feature increases security by automatically using the latest patched version of a stemcell. However, you might experience longer than expected upgrade times.

For example:

```
stemcell_criteria
  os: ubuntu-xenial
  version: "97.0"
  enable_patch_security_updates: false
```

You must set the `enable_patch_security_updates` property to `true`. If you set the property to `false`, your tile does not receive security patches through automatic stemcell updates.

You do not specify which IaaS the stemcell targets. This keeps your product template IaaS agnostic so that one product template can be deployed on any IaaS.

For a list of stemcells, including OS and version, see the [BOSH](https://bosh.io/) website.

For more information, see [Floating Stemcells](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/2.10/vmware-tanzu-ops-manager/install-understanding-stemcells.html).

### <a id='top-additional-stemcells-criteria'></a> additional_stemcells_criteria

* **Format:** Array of hashes
* **Type:** Optional

Stemcell criteria can be selected using the `stemcell_selector` property type. These stemcells are listed, in addition to the configured stemcell, with `stemcell_criteria`. After you select a stemcell, it becomes required.

For more information about the `stemcell_selector` property type, see [stemcell_selector](#stemcell-selector).

For example:

```
additional_stemcells_criteria:
  - os: ubuntu-xenial
    version: 97.0
    enable_patch_security_updates: false
  - os: windows2016
    version: 1709.1
```

### <a id='top-requires'></a> requires_product_versions

* **Format:** Array of hashes
* **Type:** Optional

A list of tile dependencies. If the required tile is not present in the <%= vars.platform_name %> installation, Tanzu Operations Manager lists the needed dependencies and does not install your tile until the dependencies are satisfied.

Supported restriction operators are `=`, `!=`, `>`, `<`, `>=`, `<=`, and `~>`.

The following keys are supported:

- `name`: The name of the tile required by your tile. This is a required key.
- `version`: The version range required by your tile. This is a required key.
- `optional`: This is an optional key that defaults to false.

<p class="note caution">
<span class="note__title">Caution</span>
Declared dependencies are required in Tanzu Operations Manager v2.7 and earlier.
</p>

For example:

```
 requires_product_versions:
  - name: tile-one
    version: '> 1.2'
  - name: tile-two
    version: '~> 2.3.4'
    optional: true
```

For more information about required and optional dependencies, see [Dependencies](tile-structure.html#dependencies) in _How Tiles Work_.

### <a id='top-release'></a> releases

* **Format:** Array of hashes
* **Type:** Required

The list of releases contained in your tile's releases directory.

The version of the release must be exactly the same as the version contained in the release.

Each release requires the following keys:

* `name`
* `file`
* `version`

### <a id='top-variables'></a> variables

* **Format:** Array of hashes
* **Type:** Optional

A list of variables, that are generated after a deploy succeeds.

You can reference variables in a manifest snippet using triple-parentheses expressions.

Each release requires the following keys:

* `name`
* `type`

### <a id='top-post-deploy'></a> post_deploy_errands

* **Format:** Array of hashes
* **Type:** Optional

A list of errands that run after a deploy succeeds.

Set the `run_post_deploy_errand_default:` property to `on` or `off` to set the default for the errand's run rule selector in Tanzu Operations Manager.

For more information, see [Errands](./tile-errands.html). If this property is not supplied, the selector defaults to `On`.

### <a id='top-pre-delete'></a> pre_delete_errands

* **Format:** Array of hashes
* **Type:** Optional

A list of errands that run before a deployment is deleted.

Set the `run_pre_delete_errand_default:` property to `on` or `off` to set the default for the errand's run rule selector in Tanzu Operations Manager. If you do not specify this property, the selector defaults to `On`.

For more information, see [Errands](./tile-errands.html).

### <a id='top-runtime-configs'></a> runtime_configs

* **Format:** Array of hashes
* **Type:** Optional

These are keys that define global deployment configurations. For more information, see [Managing Runtime Configs](./runtime-config.html).

### <a id='top-verifier'></a> install_time_verifiers

* **Format:** Array of hashes
* **Type:** Optional

Install-time verifiers confirm that properties for external services are set correctly.
Install-time verifiers run in Tanzu Operations Manager before the changes are applied.
You can correct invalid properties before you  deploy.

For example, `Verifiers::MysqlDatabaseVerifier` checks that MySQL database properties are valid by
using the properties to connect to the MySQL database. If the properties are invalid,
the install-time verifier informs you.

Each install-time verifier supports the following keys:

* `name`: The type of verifier. The value must be one of the verifiers listed in the following table.

* `properties`: A mapping of verifier inputs to either property references or static values.
The required properties for each verifier are listed in the table below.

* `ignorable`: If this key is set to `false`, you cannot click **Apply Changes** until the verification errors are resolved.
If this key is set to `true`, you can ignore the warning message and click **Apply Changes**.
This key is set to `false` by default.

* `run_on`: Determines when to run the verifier. Valid values include `'always'` and `'major_or_minor_upgrades'`.
Defaults to `'always'`.

For information about how you can manage and view verifiers,
see [Managing Tanzu Operations Manager Verifiers](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/2.10/vmware-tanzu-ops-manager/install-granular-verifier-control.html).

The following table lists the available install-time verifiers:

<table class="table">
<thead>
  <tr>
    <th width="250">
      Verifier Type
    </th>
    <th>
      Verifies that...
    </th>
    <th width="210px">
      Properties
    </th>
  </tr>
</thead>
  <tr>
    <td>
        <code>Verifiers::BlobstoreVerifier</code>
    </td>
    <td>
      the specified AWS s3 bucket exists and is accessible.
    <td>
      <ul>
        <li><code>access_key_id</code></li>
        <li><code>bucket_name</code></li>
        <li><code>secret_access_key</code></li>
        <li>(Optional) <code>signature_version</code></li>
        <li>(Optional) <code>region</code></li>
        <li>(Optional) <code>use_path_style</code></li>
        <li>(Optional) <code>endpoint</code></li>
        <li>(Optional) <code>use_path_style</code></li>
        <li>(Optional, only available after Metadata version 2.10.1, shipped in Tanzu Operations Manager v2.10.21) <code>ca_cert</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>
        <code>Verifiers::LDAPBindVerifier</code>
    </td>
    <td>
      the specified LDAP server exists and that the provided credentials are valid.
      Multiple LDAP servers may be verified if the <code>url</code> property is a space-separated list of server URLs.
    <td>
      <ul>
        <li><code>url</code></li>
        <li><code>credentials</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>
      <code>Verifiers::MysqlDatabaseVerifier</code>
    </td>
    <td>
      the specified MySQL server exists and that the provided credentials and database are valid.
    </td>
    <td>
      <ul>
        <li><code>database</code></li>
        <li><code>host</code></li>
        <li><code>password</code></li>
        <li><code>port</code></li>
        <li><code>username</code></li>
        <li>(Optional) <code>tls_enabled</code></li>
        <li>(Optional) <code>tls_ca</code></li>
        <li>(Optional) <code>tls_certificate</code></li>
        <li>(Optional) <code>tls_private_key</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>
      <code>Verifiers::SmtpAuthenticationVerifier</code>
    </td>
    <td>
      the specified SMTP server exists and that the provided credentials are valid.
    </td>
    <td>
      <ul>
        <li><code>credentials</code></li>
        <li><code>address</code></li>
        <li><code>port</code></li>
        <li><code>helo_domain</code></li>
        <li><code>authentication</code></li>
        <li><code>enable_starttls_auto</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>
      <code>Verifiers::SsoUrlVerifier</code>
    </td>
    <td>
      the specified SSO server exists.
    </td>
    <td>
      <ul>
        <li><code>url</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>
      <code>Verifiers::StaticIpsVerifier</code>
    </td>
    <td>
      all requested static IPs fall within the subnet assigned to the job. For more information, see <code>static_ips</code> in <a href="#job-types">Job Types</a>.
    </td>
    <td>
      <em>(none)</em>
    </td>
  </tr>
  <tr>
    <td>
      <code>Verifiers::WildcardDomainVerifier</code>
    </td>
    <td>
      the specified domain resolves using DNS.
    </td>
    <td>
      <ul>
        <li><code>domain</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>
      <code>Verifiers::VsphereConfigurationVerifier</code>
    </td>
    <td>
      the vSphere configuration is valid.
    </td>
    <td>
      <ul>
        <li><code>vcenter_hosturl</code></li>
        <li><code>vcenter_credentials</code></li>
        <li><code>datacenter</code></li>
        <li><code>datastore_pattern</code></li>
      </ul>
    </td>
  </tr>
  <tr>
    <td>
      <code>Verifiers::HttpSuccessVerifier</code>
    </td>
    <td>
      the specified endpoint returns successfully. If <code>must_match_regex</code> expression is provided, it must be wrapped in forward slashes. For example, <code>/.*/</code>. The verifier ensures that the response body matches the regular expression.
    </td>
    <td>
      <ul>
         <li><code>host</code></li>
         <li><code>port</code></li>
         <li><code>path</code></li>
         <li><code>scheme</code></li>
         <li>(Optional) <code>must_match_regex</code></li>
         <li>(Optional) <code>skip_ssl_verification</code></li>
      </ul>
    </td>
  </tr>
</table>

The following is an example of a `install_time_verifiers` section:

```
install_time_verifiers:
- ignorable: true
  name: Verifiers::WildcardDomainVerifier
  properties:
    domain: .cloud_controller.system_domain
- name: Verifiers::SsoUrlVerifier
  properties:
    url: .properties.uaa.saml.sso_url
- ignorable: true
  name: Verifiers::BlobstoreVerifier
  properties:
    access_key_id: .properties.system_blobstore.external.access_key
    bucket_name: .properties.system_blobstore.external.buildpacks_bucket
    endpoint: .properties.system_blobstore.external.endpoint # Optional. Defaults to AWS
    region: .properties.system_blobstore.external.region # Optional. Defaults to default IaaS setting
    secret_access_key: .properties.system_blobstore.external.secret_key
    signature_version: .properties.system_blobstore.external.signature_version
    use_path_style: .properties.system_blobstore.external.use_path_style # Optional. Defaults to false
    ca_cert: .properties.system_blobstore.external.ca_cert
- ignorable: true
  name: Verifiers::MysqlDatabaseVerifier
  properties:
    database: "static-database-name"
    host: .properties.system_database.external.host
    password: .properties.system_database.external.account_password
    port: 1234
    username: example-dbuser
- ignorable: true
  name: Verifiers::HttpSuccessVerifier
  run_on: major_or_minor_upgrades
  properties:
    host: .properties.external_host
    scheme: https
    port: 443
    path: /verify
```

### <a id='top-icon-image'></a> icon_image

* **Format:** Base64 Image
* **Type:** Required

This is the icon that appears on the tile in the Tanzu Operations Manager Installation Dashboard.

### <a id="top-bas-url"></a> base_releases_url

* **Format:** String
* **Type:** Optional

A publicly available URL that is passed to BOSH in order to download your releases during installation. If you use this field, BOSH Director must have internet connectivity. This allows you to package your tile without releases, decreasing the tile size.

### <a id="syslog-flag"></a> opsmanager_syslog

* **Format:** Boolean
* **Type:** Optional, default `false`

Set `opsmanager_syslog` to `true` to opt in to the Tanzu Operations Manager provided syslog form. If you opt in, you do not need provide the Syslog BOSH release for your tile.

For more information about the Syslog BOSH release, see the [Syslog BOSH Release](https://github.com/cloudfoundry/syslog-release) repository on GitHub.

For more information about migrating an existing form to the Tanzu Operations Manager provided syslog form, see [Migrating existing Syslog configuration to Tanzu Operations Manager](./migrating-syslog-configuration.html).


## <a id='form-properties'></a> Form Properties

Each form type you write is composed of form properties. Form properties dictate the structure of the form fields that appear in the Tanzu Operations Manager UI. The `name` of each form appears on the left-hand side as navigational tabs.

Form properties reference `property_blueprints`. Property blueprints define each text box's data type.

For a corresponding example to the `form_types` example that follows, see [property_blueprints](#property-blueprints).

The following is an example of the properties that appear in the `form_types` section of a product template:

```
form_types:
  - name: example-form
    label: Configurable Properties
    description: All the properties that you can configure!
    markdown: |
      ## I am markdown, hear me _roar_.

      ![Alt text](http://placekitten.com/g/400/200)

      Things to do:

      1. Learn [markdown](https://daringfireball.net/projects/markdown/).
      1. ...
      1. Profit!
    property_inputs:
      - reference: .web_server.example_string
        label: Example string
        description: 'Configure a property of type string'
      - reference: .web_server.example_string_with_placeholder
        label: Example string containing Placeholder text
        description: 'Optional field. Configuration not necessary'
        placeholder: 'Ghost text. Spooky!'
      - reference: .web_server.example_migrated_integer
        label: Example integer
        description: 'Configure a property of type integer'
      - reference: .web_server.example_boolean
        label: Example boolean
        description: 'Configure a property of type boolean'
      - reference: .web_server.example_dropdown
        label: Example dropdown
        description: 'Configure a property of type dropdown'
      - reference: .web_server.example_domain
        label: Example domain
        description: 'Configure a property of type domain'
      - reference: .web_server.example_wildcard_domain
        label: Example wildcard_domain
        description: 'Configure a property of type wildcard_domain'
      - reference: .web_server.example_string_list
        label: Example string_list
        description: 'Configure a property of type string_list'
      - reference: .web_server.example_text
        label: Example text
        description: 'Configure a property of type text (setting to "magic value" causes the web server job instance count to go to 0)'
      - reference: .web_server.example_ldap_url
        label: Example ldap_url
        description: 'Configure a property of type ldap_url'
      - reference: .web_server.example_email
        label: Example email
        description: 'Configure a property of type email'
      - reference: .web_server.example_http_url
        label: Example http_url
        description: 'Configure a property of type http_url'
      - reference: .web_server.example_ip_address
        label: Example ip_address
        description: 'Configure a property of type ip_address'
      - reference: .web_server.example_ip_ranges
        label: Example ip_ranges
        description: 'Configure a property of type ip_ranges'
      - reference: .web_server.example_multi_select_options
        label: Example multi_select_options
        description: 'Configure a property of type multi_select_options'
      - reference: .web_server.example_network_address_list
        label: Example network_address_list
        description: 'Configure a property of type network_address_list (this property was marked with freeze_on_deploy, and so cannot be edited after changes are first applied)'
      - reference: .web_server.example_network_address
        label: Example network_address
        description: 'Configure a property of type network_address'
      - reference: .web_server.example_port
        label: Example port
        description: 'Configure a property of type port'
      - reference: .web_server.example_smtp_authentication
        label: Example smtp_authentication
        description: 'Configure a property of type smtp_authentication'
      - reference: .web_server.client_certificate
        label: Example certificate
        description: 'Configure a certificate'
    verifiers:
      - name: Verifiers::WildcardDomainVerifier
        properties:
          domain: .web_server.example_wildcard_domain
      - name: Verifiers::StaticIpsVerifier
        properties:
          domain: .web_server.example_ip_address
```

### <a id='form-name'></a> name

* **Format:** String
* **Type:** Required

The internal name of the form.

### <a id='form-label'></a> label

* **Format:** String
* **Type:** Required

The label of the form as it appears as a link on the left hand side of each form.

### <a id='form-description'></a> description

* **Format:** String
* **Type:** Optional

The description of the form. Appears at the top of the form as a header.

### <a id='form-markdown'></a> markdown

* **Format:** Markdown
* **Type:** Optional

Provide a block of markdown to display at the top of the form, including image support. Use this property to document the tile and provide explanations or references.

### <a id='form-property-inputs'></a> property_inputs

* **Format:** Array of hashes
* **Type:** Required

References to properties defined in the `property_blueprints` section of the product template.

### <a id='verifiers'></a> verifiers

Verifiers confirm that properties are set correctly in forms.
If a verifier displays a warning, the form can still be saved and the warning can be ignored.

Verifiers are similar to install-time verifiers
except that they run after a form is saved and not before you click **Apply Changes**.
Verifiers do not block deployments and only inform you that the properties you set are invalid.

To have a verifier run when a form is saved and before you click **Apply Changes**,
add the verifier to both the `verifiers` and `install_time_verifiers` sections.

For information about how you can manage and view verifiers,
see [Managing Tanzu Operations Manager Verifiers](https://docs.vmware.com/en/VMware-Tanzu-Operations-Manager/2.10/vmware-tanzu-ops-manager/install-granular-verifier-control.html).

For information about how verifiers are configured, see [install\_time\_verifiers](#top-verifier).

The following is an example of a `verifiers` section:

```
form_types:
  - name: example-form
    label: Configurable Properties
    description: All the properties that you can configure!
    property_inputs:
      - reference: .web_server.example_wildcard_domain
        label: Example wildcard_domain
        description: 'Configure a property of type wildcard_domain'
      - reference: .web_server.static_ips
        label: Example ip_address
        description: 'Configure a property of type ip_address'
    verifiers:
      - name: Verifiers::WildcardDomainVerifier
        properties:
          domain: .web_server.example_wildcard_domain
      - name: Verifiers::StaticIpsVerifier
      - name: Verifiers::MysqlDatabaseVerifier
        properties:
          database: "static-database-name"
          host: .properties.example-database-host
          port: 1234
          username: example-dbuser
```

You can specify either a tile property reference or a static value for a form verifier. In the preceding example, `Verifiers::MysqlDatabaseVerifier` uses a tile property reference for the database host and static values for the database name, port number, and user name.

### <a id='form-placeholder'></a> placeholder

* **Format:** String
* **Type:** Optional

You can specify placeholder text for a text box. The text appears in light gray to show an example value for the user. The text disappears when you type in the text box and reappears if you leave the text box empty.

The `placeholder` attribute displays for the following form types:

* `string`
* `integer`
* `domain`
* `wildcard_domain`
* `string_list`
* `text`
* `ldap_url`
* `email`
* `http_url`
* `ip_address`
* `ip_ranges`
* `network_address_list`
* `network_address`
* `port`


## <a id='job-types'></a> Job Types

The following is an example of the `job_types` section that appears in a product template.

This section defines the jobs that end up in a BOSH manifest. Those jobs are defined in your BOSH release.

Jobs require many different settings to function properly. That is the core of what Tanzu Operations Manager does for you: Tanzu Operations Manager asks you to designate values for those settings and generates a manifest based on what you specify.

Tanzu Operations Manager does not require tile authors to provide `vm_credentials` in the `property_blueprints` for each `job_type`. This is because `vm_credentials` are generated automatically. You can find them in the release manifest.

Tanzu Operations Manager ignores <code>static_ip</code> and <code>dynamic_ip</code> keys. To configure the static IPs of a <code>job_type</code>, create a property blueprint with <code>name: static_ips</code> and <code>type: ip_ranges</code>.<br><code>static_ips</code> is a special keyword that Tanzu Operations Manager uses to find static IPs and pass them to the BOSH manifest. For more information about <code>ip_ranges</code>, see <a href="#ip-ranges">ip_ranges</a>.

```
job_types:
  - name: web_server
    resource_label: Web Server
    templates:
      - name: web_server
        release: example-release
      - name: time_logger
        release: example-release
    release: example-release
    static_ip: 1
    dynamic_ip: 0
    single_az_only: true
    use_stemcell: ubuntu-xenial
    max_in_flight: 1
    resource_definitions:
      - name: ram
        type: integer
        configurable: true
        default: 1024
      - name: ephemeral_disk
        type: integer
        configurable: true
        default: 2048
      - name: persistent_disk
        type: integer
        configurable: true
        default: 1024
        constraints:
          min: 1024
      - name: cpu
        type: integer
        configurable: true
        default: 1
    instance_definition:
      name: instances
      type: integer
      configurable: true
      default: 1
      constraints:
        max: 1
      zero_if:
        property_reference: '.web_server.example_text'
        property_value: 'magic value'
        allow_manual_selection_of_zero: false
    manifest: |
      generated:
        root_rsa_certificate: (( $ops_manager.ca_certificate ))
        rsa_cert_credentials:
          public_key_pem: (( generated_rsa_cert_credentials.public_key_pem ))
          cert_and_private_key_pems: (( generated_rsa_cert_credentials.cert_and_private_key_pems ))
        rsa_pkey_credentials:
          public_key_pem: (( generated_rsa_pkey_credentials.public_key_pem ))
          private_key_pem: (( generated_rsa_pkey_credentials.private_key_pem ))
          public_key_openssh: (( generated_rsa_pkey_credentials.public_key_openssh ))
          public_key_fingerprint: (( generated_rsa_pkey_credentials.public_key_fingerprint ))
        salted_credentials:
          sha512_hashed_password: (( generated_salted_credentials.sha512_hashed_password ))
          identity: (( generated_salted_credentials.identity ))
          salt: (( generated_salted_credentials.salt ))
          password: (( generated_salted_credentials.password ))
        simple_credentials:
          identity: (( generated_simple_credentials.identity ))
          password: (( generated_simple_credentials.password ))
        secret: (( generated_secret.value ))
        uuid: (( generated_uuid.value ))
      configured:
        string: (( example_string.value ))
        integer: (( example_migrated_integer.value ))
        ...
        record_collection: (( .properties.example_collection.value || [] ))
        selector: (( .properties.example_selector.selected_option.parsed_manifest(my_snippet) ))
      ops_manager_provided_accessors:
        name: (( name ))
        cpu: (( cpu ))
        ram: (( ram ))
        ephemeral_disk: (( ephemeral_disk ))
        persistent_disk: (( persistent_disk ))
        instances: (( instances ))
        any_instances: (( any_instances ))
        subnet_cidrs: (( subnet_cidrs ))
    property_blueprints:
    - name: static_ips
      type: ip_ranges
      configurable: true
      optional: true
    - name: generated_rsa_cert_credentials
      type: rsa_cert_credentials
    - name: generated_rsa_pkey_credentials
      type: rsa_pkey_credentials
    - name: generated_salted_credentials
      type: salted_credentials
    - name: generated_simple_credentials
      type: simple_credentials
    - name: generated_secret
      type: secret
    - name: generated_uuid
      type: uuid
    - name: example_string_with_placeholder
      type: string
      configurable: true
      optional: true
      placeholder: 'Configure me!'
    - name: example_string
      type: string
      configurable: true
      default: 'Hello world'
      constraints:
      - must_match_regex: '^[^!@#$%^&*()]*$'
        error_message: 'This name cannot contain capital digits.'
      - must_match_regex: '^[^0-9]*$'
        error_message: 'This name cannot contain digits.'
    - name: example_migrated_integer
      type: integer
      configurable: true
      default: 1
    - name: example_boolean
      type: boolean
      configurable: true
      default: true
    - name: example_dropdown
      type: dropdown_select
      configurable: true
      default: kiwi
      options:
        - name: kiwi
          label: 'label for kiwi'
        - name: lime
          label: 'label for lime'
        - name: avocado
          label: 'label for avocado'
    - name: example_domain
      type: domain
      configurable: true
      default: www.example.com
    - name: example_wildcard_domain
      type: wildcard_domain
      configurable: true
      default: 'example.com'
    - name: example_string_list
      type: string_list
      configurable: true
      default: 'a,list,of,strings'
    - name: example_text
      type: text
      configurable: true
      default: 'some_text'
    - name: example_ldap_url
      type: ldap_url
      configurable: true
      default: 'ldap://example.com'
    - name: example_email
      type: email
      configurable: true
      default: foo@example.com
    - name: example_http_url
      type: http_url
      configurable: true
      default: 'http://www.example.com'
    - name: example_ip_address
      type: ip_address
      configurable: true
      default: '192.168.0.1'
    - name: example_ip_ranges
      type: ip_ranges
      configurable: true
      default: '1.1.1.1-1.1.1.4,2.2.2.1-2.2.2.4'
    - name: example_multi_select_options
      type: multi_select_options
      configurable: true
      default: ['earth', 'jupiter']
      options:
        - name: mercury
          label: 'label for mercury'
        - name: venus
          label: 'label for venus'
        - name: earth
          label: 'label for earth'
        - name: mars
          label: 'label for mars'
        - name: jupiter
          label: 'label for jupiter'
        - name: saturn
          label: 'label for saturn'
        - name: uranus
          label: 'label for uranus'
        - name: neptune
          label: 'label for neptune'
    - name: example_network_address_list
      type: network_address_list
      configurable: true
      default: '1.1.1.1,example.com,foo.bar.example.com'
    - name: example_network_address
      type: network_address
      configurable: true
      default: '1.1.1.1'
    - name: example_port
      type: port
      configurable: true
      default: 1111
    - name: example_smtp_authentication
      type: smtp_authentication
      configurable: true
      default: plain
    - name: client_certificate
      type: ca_certificate
      configurable: true
      optional: true
```

### <a id='job-name'></a> name

* **Format:** String
* **Type:** Required

The name of the job as it is to be created in the Tanzu Operations Manager generated BOSH manifest.

### <a id='job-label'></a> resource_label

* **Format:** String
* **Type:** Required

The label of the job as it is to appear in the resources page of the tile.

### <a id='job-template'></a> templates

* **Format:** Array of hashes
* **Type:** Required

Each element has the following text boxes:

* `name`
* `release`
* `consumes`
* `provides`

#### <a id='template-name'></a> name

* **Format:** Name of the job template to use
* **Type:** Required

#### <a id='template-release'></a> release

* **Format:** Name of the release the template is from.
* **Type:** Required

#### <a id='template-consumes'></a> consumes

* **Format:** YAML string defining BOSH links that this job consumes.
* **Type:** Optional

For more information about BOSH links, see [Links](https://bosh.io/docs/links.html) in the BOSH documentation.

#### <a id='template-provides'></a> provides

* **Format:** YAML string that defines BOSH links that this job provides.
* **Type:** Optional

For more information about BOSH links, see [Links](https://bosh.io/docs/links.html) in the BOSH documentation.

### <a id='job-release'></a> release

* **Format:** String
* **Type:** Required

The name of the BOSH release contained in your tile archive, which is the `.pivotal` file.

### <a id='job-single-az'></a> single_az_only

* **Format:** Boolean
* **Type:** Required

You can give control of balancing jobs across availability zones (AZs) by setting `single_az_only` to `false`.

To limit a job to a single AZ, set `single_az_only` to `true`.

<p class="note caution">
<span class="note__title">Caution</span>
If you change the <code>single_az_only</code> setting, your VMs can switch AZs. This change can cause an orphaned disk.
</p>

### <a id='job-max-in-flight'></a> max_in_flight

* **Format:** Integer
* **Type:** Required

A BOSH setting that controls the number of instances of this job that BOSH deploys in parallel.

### <a id='job-use-stemcell'></a> use_stemcell

* **Format:** String
* **Type:** Optional

The stemcell operating system for this job. You must set `use_stemcell` to the value of an `os` key configured in `stemcell_criteria` or `additional_stemcell_criteria`.

You can configure `use_stemcell` to enable jobs to run on different operating systems. For example, you can configure one job to run on Linux and configure a different job to run on Windows. If the instance count of a job is `0`, the configured stemcell operating system is not required to deploy the tile.

If a job does not have a `use_stemcell` property, the job uses the stemcell operating system configured in `stemcell_criteria`. For more information, see [stemcell\_criteria](#top-stemcell-criteria) and [additional\_stemcell\_criteria](#top-additional-stemcells-criteria).

### <a id='job-resource-def'></a> resource_definitions

* **Format:** Array of hashes
* **Type:** Required

A set of resource settings for the job with maximum and minimum constraints, defaults, and configuration options.

The resources you can set are:

* `ram`
* `ephemeral_disk`
* `persistent_disk`
* `cpu`

For examples of supported constraint types, see [integer](#integer).

If you set the <code>default</code> property for <code>persistent_disk</code> to <code>0</code>, users cannot edit this value and the <strong>Resource Config</strong> pane in the Tanzu Operations Manager tile shows <strong>None</strong> under the persistent disk text box.

<p class="note">
<span class="note__title">Note</span>
If you set the <code>default</code> property for <code>persistent_disk</code> to <code>0</code>, users cannot edit this value and the <strong>Resource Config</strong> pane in the Tanzu Operations Manager tile displays <strong>None</strong> under the persistent disk text box.
</p>

### <a id='job-instance-def'></a> instance_definition

* **Format:** Hash
* **Type:** Required

The number of default instances for a job, including maximum, minimum, odd, and the ability to decrease sizing after deploy.

If your tile uses an external service that performs the same job as a service in <%= vars.app_runtime_abbr %>, you can reduce resource usage by setting the instance count of a job to `0` with the `zero_if` property.

When `zero_if` is not active for an instance group, you cannot set the instance count to 0. You can override this by setting `allow_manual_selection_of_zero` to `true`. By default, it is set to `false`.

For example, your tile uses Amazon Relational Database Service (RDS) instead of MySQL, which is the default system database for <%= vars.app_runtime_abbr %>. You can remove all instance counts of MySQL by setting `property reference` to `.properties.system.database` and `property value` to `magic value`.

For examples of supported constraint types, see [integer](#integer).

If you are using the <code>zero_if</code> property, you must not set the <code>can_only_increase</code> constraint to <code>true</code>.

<p class="note">
<span class="note__title">Note</span>
If you are using the <code>zero_if</code> property, you must not set the <code>can_only_increase</code> constraint to <code>true</code>.
</p>

### <a id='job-manifest'></a> Manifest

* **Format:** Text snippet, prefaced by pipe symbol: `|`
* **Type:** Optional

Tanzub Operations Manager generates a BOSH manifest that defines properties for each job the manifest deploys. Some of these properties are not set until you click **Apply Changes**, because you configured them in the tile or because Tanzu Operations Manager had to generate them.

For more information about referencing these properties, see [Referencing Properties](#property-refs).

#### <a id='job-accessors'></a> Job Accessors

The following table that describes the double parentheses expressions Tanzu Operations Manager provides to access information about the jobs that the manifest deploys:

| Double Parentheses Expression | Description |
| ----------------------------- | ----------- |
| `(( name ))` | The name of the job. |
| `(( cpu ))` | The CPU of the VM type configured for the job. |
| `(( ram ))` | The RAM of the VM type configured for the job. |
| `(( ephemeral_disk ))` | The ephemeral disk of the VM type configured for the job. |
| `(( persistent_disk ))` | The persistent disk of the VM type configured for the job. |
| `(( instances ))` | The number of instances configured for the job. |
| `(( any_instances ))` | Returns `true` if there is a non-zero number of instances for the job. |
| `(( subnet_cidrs ))` | A list of CIDRs associated with the job. |


## <a id='property-blueprints'></a> Property Blueprint Reference

### <a id='common-attributes'></a> Common Property Blueprint Attributes

All property blueprints can have the following attributes:

* `name`: Required. The name of the property. The name is used to reference a property in `form_types` and in `(( ))` accessors.

* `type`: Required. The type of property. Must be one of the property types listed in this topic.

* `optional`: Optional. Default: `false`. When set to `true`, Tanzu Operations Manager does not require this property to be set in order to deploy, nor does it validate that this field has a value when saving a form with this property. `optional` cannot be set to `true` if a `default` value is set. For more information about which types support `default`, see [All Property Blueprint Types](#all-property-types). `optional` cannot be set to `true` if the property also has `configurable: false`.

* `configurable`: Optional. Default: `false`. When set to `true` for property types that support your configuration, you are not allowed to configure this value. Do not set `configurable: true` for property types that do not support your configuration. When set to `false`, Tanzu Operations Manager does not render this property in any form, even if it is specified in a `form_type`, nor does it allow the property to be updated through the API. For property types that support auto-generation of values, when `configurable` is set to `false`, Tanzu Operations Manager generates and saves a value for this property when the tile this property belongs to is deployed for the first time.

* `freeze_on_deploy`: Optional. Default: `false`. When set to `true`, Tanzu Operations Manager does not allow this property to be changed after the tile this property belongs to is successfully deployed.

* `conditional_default`: Optional. Accepts two nested keys: `dependency_present` and `value`. The `conditional_default` key overrides the default value specified in the property blueprint only when that tile dependency is present. Otherwise, the default value is used. The `conditional_default` key is evaluated when the specified tile dependency is imported. It is reevaluated only when that tile dependency is staged or deleted. For example:

    ```
    - name: example_selector
      type: selector
      default: Yes
      conditional_default:
        dependency_present: cf
        value: No
      option_templates:
        - name: yes_option
          select_value: Yes
          named_manifests:
            - name: my_snippet
              manifest: |
                ...
        - name: no_option
          select_value: No
          named_manifests:
            - name: my_other_snippet
              manifest: |
                ...
    ```

### <a id='configurable-and-auto-generated'></a> Configurable and Auto-Generated Properties

When a property has `configurable: true` and is added to a `form_type`, you can configure the value of that property.

Alternatively, a property with `configurable: false` gets a value auto-generated by Tanzu Operations Manager.
For which property types support each of these, see the sections that follow.

Properties with `configurable` set to `false`:

* Cannot be edited by you.
* Do not show up in forms, even if added under `form_types`.
* Get auto-generated values filled in by Tanzu Operations Manager if that specific type of property supports auto-generation of values.

### <a id='named-manifest'></a> named_manifest for Selector and Collection Type Properties

Specify a property for collection within the `named_manifest` section of the metadata, as in the example below:

```
- name: certificate_collection
  type: collection
  configurable: true
  property_blueprints:
    - name: some_cert_name
      type: string
    - name: some_cert
      type: rsa_cert_credentials
  named_manifests:
  - name: for_routing
    manifest: |
      name:  (( current_record.some_cert_name.value ))
      private_key:  (( current_record.some_cert.private_key_pem ))
      public_key:  (( current_record.some_cert.public_key_pem ))
      certificate: (( current_record.some_cert.cert_pem ))
```

Use the `current_record` property within a collection record to refer to other properties in the same record.

For example, the properties in the `for_routing` named manifest refer to the values for `name`, `private_key`, `public_key`, and `certificate` within this record only.

The <code>current_record</code> property is reserved. You cannot create a new property named <code>current_record</code>.

<p class="note">
<span class="note__title">Note</span>
If you are using the The <code>current_record</code> property is reserved. You cannot create a new property named <code>current_record</code>.
</p>

After you define a named manifest, you can reference it using a manifest snippet in the following format:

```
routing_certificates: (( .properties.certificate_collection.parsed_manifest(for_routing) ))
```

Tanzu Operations Manager renders the following manifest from this example:

```
routing_certificates:
  - name: foo_cert
    private_key: PRIVATE-KEY
    public_key: PUBLIC-KEY
    certificate: CERTIFICATE
  - name: bar_cert
    private_key: PRIVATE-KEY
    public_key: PUBLIC-KEY
    certificate: CERTIFICATE
```

For more information, see [Selector and Collection Types](#complex).


## <a id='all-property-types'></a> All Property Blueprint Types

These sections describe every property blueprint type.

### <a id='boolean'></a> boolean

<%= partial 'tile-reference/property-blueprints/boolean' %>

### <a id='ca-certificate'></a> ca_certificate

<%= partial 'tile-reference/property-blueprints/ca-certificate' %>

### <a id='collection'></a> collection

<%= partial 'tile-reference/property-blueprints/collection' %>

### <a id='disk-type-dropdown'></a> disk_type_dropdown

<%= partial 'tile-reference/property-blueprints/disk-type-dropdown' %>

### <a id='domain'></a> domain

<%= partial 'tile-reference/property-blueprints/domain' %>

### <a id='dropdown-select'></a> dropdown_select

<%= partial 'tile-reference/property-blueprints/dropdown-select' %>

### <a id='email'></a> email

<%= partial 'tile-reference/property-blueprints/email' %>

### <a id='http-url'></a> http_url

<%= partial 'tile-reference/property-blueprints/http-url' %>

### <a id='integer'></a> integer

<%= partial 'tile-reference/property-blueprints/integer' %>

### <a id='ip-address'></a> ip_address

<%= partial 'tile-reference/property-blueprints/ip-address' %>

### <a id='ip-ranges'></a> ip_ranges

<%= partial 'tile-reference/property-blueprints/ip-ranges' %>

### <a id='ldap-url'></a> ldap_url

<%= partial 'tile-reference/property-blueprints/ldap-url' %>

### <a id='multi-select-options'></a> multi_select_options

<%= partial 'tile-reference/property-blueprints/multi-select-options' %>

### <a id='network-address'></a> network_address

<%= partial 'tile-reference/property-blueprints/network-address' %>

### <a id='network-address-list'></a> network_address_list

<%= partial 'tile-reference/property-blueprints/network-address-list' %>

### <a id='port'></a> port

<%= partial 'tile-reference/property-blueprints/port' %>

### <a id='rsa-cert-credential'></a> rsa_cert_credentials

<%= partial 'tile-reference/property-blueprints/rsa-cert-credentials' %>

### <a id='rsa-pkey-credential'></a> rsa_pkey_credentials

<%= partial 'tile-reference/property-blueprints/rsa-pkey-credentials' %>

### <a id='salted-credentials'></a> salted_credentials

<%= partial 'tile-reference/property-blueprints/salted-credentials' %>

### <a id='secret'></a> secret

<%= partial 'tile-reference/property-blueprints/secret' %>

### <a id='selector'></a> selector

<%= partial 'tile-reference/property-blueprints/selector' %>

### <a id='service-network-az-multi-select'></a> service_network_az_multi_select

<%= partial 'tile-reference/property-blueprints/service-network-az-multi-select' %>

### <a id='service-network-az-single-select'></a> service_network_az_single_select

<%= partial 'tile-reference/property-blueprints/service-network-az-single-select' %>

### <a id='simple-credentials'></a> simple_credentials

<%= partial 'tile-reference/property-blueprints/simple-credentials' %>

### <a id='smtp-authentication'></a> smtp_authentication

<%= partial 'tile-reference/property-blueprints/smtp-authentication' %>

### <a id='stemcell-selector'></a> stemcell_selector

<%= partial 'tile-reference/property-blueprints/stemcell-selector' %>

### <a id='string-list'></a> string_list

<%= partial 'tile-reference/property-blueprints/string-list' %>

### <a id='string'></a> string

<%= partial 'tile-reference/property-blueprints/string' %>

### <a id='text'></a> text

<%= partial 'tile-reference/property-blueprints/text' %>

### <a id='uuid'></a> uuid

<%= partial 'tile-reference/property-blueprints/uuid' %>

### <a id='vm-type-drowdown'></a> vm_type_dropdown

<%= partial 'tile-reference/property-blueprints/vm-type-dropdown' %>

### <a id='wildcard-domain'></a> wildcard_domain

<%= partial 'tile-reference/property-blueprints/wildcard-domain' %>


## <a id='using-provided-examples'></a> Use the Examples Provided

You can copy each example into the `metadata.yml` template below and package it together along with the [`os-conf`](https://github.com/cloudfoundry/os-conf-release/releases) release as a `.pivotal` file to make a working tile.

```console
---
name: p-example
label: Example Tile
description: An example tile
product_version: '1.1'
minimum_version_for_upgrade: '1.0'
metadata_version: '2.2'
rank: 1
 stemcell_criteria:
  os: ubuntu-xenial
  version: '97.3'
 releases:
  - name: os-conf
    file: os-conf
    version: '15'
 # a base 64 encoded PNG with a teal square
icon_image: iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAIAAACQd1PeAAAADElEQVQI12NgaC8BAAGGAPwUz8ygAAAAAElFTkSuQmCC

 includes: # This top-level key is ignored by Tanzu Operations Manager.
  # This anchor is only to make the examples below more terse and is not required.
  job_type_boilerplate: &job_type_boilerplate
    max_in_flight: 1
    single_az_only: true
    resource_definitions:
      - name: ram
        configurable: true
        default: 1024
       - name: ephemeral_disk
         configurable: true
         default: 1024
       - name: persistent_disk
         configurable: true
         default: 1024
         constraints:
           min: 1024
       - name: cpu
         configurable: true
         default: 1
     instance_definition:
      name: instances
      configurable: true
      default: 1
```

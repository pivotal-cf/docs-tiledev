---
title: Service Broker Resources
owner: Services
---

You can use the following resources to build service brokers and routing services.

## <a id="resources"></a> Service Broker resources

* The [Custom Services Overview](http://docs.pivotal.io/application-service/services/overview.html) topic gives a high-level description of how service brokers work in <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>).

* The [Service Broker API](http://docs.pivotal.io/application-service/services/api.html) topic gives a more detailed explanation of <%= vars.app_runtime_abbr %> service brokers, and provides a full specification for the endpoints, requests, responses, and status codes that a service broker must support.

* The [Example Service Brokers](http://docs.pivotal.io/application-service/services/examples.html) topic offers example brokers written in Ruby, Java, and Go.

* The [Supporting Multiple <%= vars.app_runtime_abbr %> Instances](https://docs.pivotal.io/application-service/services/supporting-multiple-cf-instances.html) topic has information about registering a service broker with multiple <%= vars.app_runtime_abbr %> instances.


## <a id="route"></a> Route Services resources

* [Route services](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/<%= vars.current_major_version %>/tas-for-vms/route-services.html) explains how route services work, and what are the different
architectures for using them in a <%= vars.app_runtime_abbr %> deployment.

- [Example route services](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/<%= vars.current_major_version %>/tas-for-vms/route-services.html#examples) gives examples of a logging route service, a rate-limiting route service, and another logging service written in Spring Boot. It also offers a tutorial on
setting up the logging route service.


## <a id="catalog"></a> Catalog Resources

* [Catalog Metadata](https://docs.vmware.com/en/VMware-Tanzu-Application-Service/<%= vars.current_major_version %>/tas-for-vms/metadata.html) explains how to publish service plan information to Marketplace, including the icons, display names, and links that appear in the Apps Manager UI but not the plain text output of `cf marketplace`.
